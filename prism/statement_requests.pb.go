//
//Messages related to statements in a query language and their results.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: org/polypheny/prism/statement_requests.proto

package prism

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Closes the result set of the statement matching the specified statement id. If no such statement exists, or the result is already closed, this request is ignored.
type CloseResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the statement of which the result set should be closed.
	StatementId int32 `protobuf:"varint,1,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
}

func (x *CloseResultRequest) Reset() {
	*x = CloseResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResultRequest) ProtoMessage() {}

func (x *CloseResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResultRequest.ProtoReflect.Descriptor instead.
func (*CloseResultRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{0}
}

func (x *CloseResultRequest) GetStatementId() int32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

// Represents a request to execute a statement without any parameters.
// This message includes details about the language in which the statement is written, the statement itself, and optional attributes such as fetch size and namespace name to control how the statement is executed.
type ExecuteUnparameterizedStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the query language of the statement being executed.
	LanguageName string `protobuf:"bytes,1,opt,name=language_name,json=languageName,proto3" json:"language_name,omitempty"`
	// The statement to be executed.
	Statement string `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	// (Optional) Number of rows to include into the response message of this call.
	// More rows can be fetched afterwards. If not specified, a default value is used.
	FetchSize *int32 `protobuf:"varint,3,opt,name=fetch_size,json=fetchSize,proto3,oneof" json:"fetch_size,omitempty"`
	// (Optional) The namespace under which the statement should be executed.
	// If not specified, the namespace specified for the connection is used.
	NamespaceName *string `protobuf:"bytes,4,opt,name=namespace_name,json=namespaceName,proto3,oneof" json:"namespace_name,omitempty"`
}

func (x *ExecuteUnparameterizedStatementRequest) Reset() {
	*x = ExecuteUnparameterizedStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteUnparameterizedStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteUnparameterizedStatementRequest) ProtoMessage() {}

func (x *ExecuteUnparameterizedStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteUnparameterizedStatementRequest.ProtoReflect.Descriptor instead.
func (*ExecuteUnparameterizedStatementRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteUnparameterizedStatementRequest) GetLanguageName() string {
	if x != nil {
		return x.LanguageName
	}
	return ""
}

func (x *ExecuteUnparameterizedStatementRequest) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *ExecuteUnparameterizedStatementRequest) GetFetchSize() int32 {
	if x != nil && x.FetchSize != nil {
		return *x.FetchSize
	}
	return 0
}

func (x *ExecuteUnparameterizedStatementRequest) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

// Encapsulates a batch of unparameterized statements to be executed.
// This is useful for executing multiple statements in a single call,
// improving efficiency and performance by reducing the number of round trips to the server.
type ExecuteUnparameterizedStatementBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of statements to be executed. Each statement is an instance of ExecuteUnparameterizedStatementRequest,
	// allowing for individual control over the execution parameters of each statement in the batch.
	Statements []*ExecuteUnparameterizedStatementRequest `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *ExecuteUnparameterizedStatementBatchRequest) Reset() {
	*x = ExecuteUnparameterizedStatementBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteUnparameterizedStatementBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteUnparameterizedStatementBatchRequest) ProtoMessage() {}

func (x *ExecuteUnparameterizedStatementBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteUnparameterizedStatementBatchRequest.ProtoReflect.Descriptor instead.
func (*ExecuteUnparameterizedStatementBatchRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{2}
}

func (x *ExecuteUnparameterizedStatementBatchRequest) GetStatements() []*ExecuteUnparameterizedStatementRequest {
	if x != nil {
		return x.Statements
	}
	return nil
}

// Represents a request to prepare a statement for execution.
// This message includes the language of the statement, the statement text itself, and optionally,
// the namespace where the statement should be prepared. Preparing a statement can improve performance for repeated execution.
type PrepareStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the query language of the statement to be prepared.
	LanguageName string `protobuf:"bytes,1,opt,name=language_name,json=languageName,proto3" json:"language_name,omitempty"`
	// The statement to be prepared.
	Statement string `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	// (Optional) The namespace under which the statement should be prepared.
	NamespaceName *string `protobuf:"bytes,3,opt,name=namespace_name,json=namespaceName,proto3,oneof" json:"namespace_name,omitempty"`
}

func (x *PrepareStatementRequest) Reset() {
	*x = PrepareStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareStatementRequest) ProtoMessage() {}

func (x *PrepareStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareStatementRequest.ProtoReflect.Descriptor instead.
func (*PrepareStatementRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{3}
}

func (x *PrepareStatementRequest) GetLanguageName() string {
	if x != nil {
		return x.LanguageName
	}
	return ""
}

func (x *PrepareStatementRequest) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *PrepareStatementRequest) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

// Represents a request to execute a previously prepared statement by its ID, using indexed parameters.
// his allows for efficient execution of prepared statements with the provided parameters.
type ExecuteIndexedStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the prepared statement to be executed.
	StatementId int32 `protobuf:"varint,1,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	// The indexed parameters to be used with the statement.
	Parameters *IndexedParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// (Optional) Number of rows to include into the response message of this call. More rows can be fetched afterwards.
	FetchSize *int32 `protobuf:"varint,3,opt,name=fetch_size,json=fetchSize,proto3,oneof" json:"fetch_size,omitempty"`
}

func (x *ExecuteIndexedStatementRequest) Reset() {
	*x = ExecuteIndexedStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteIndexedStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteIndexedStatementRequest) ProtoMessage() {}

func (x *ExecuteIndexedStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteIndexedStatementRequest.ProtoReflect.Descriptor instead.
func (*ExecuteIndexedStatementRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteIndexedStatementRequest) GetStatementId() int32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *ExecuteIndexedStatementRequest) GetParameters() *IndexedParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExecuteIndexedStatementRequest) GetFetchSize() int32 {
	if x != nil && x.FetchSize != nil {
		return *x.FetchSize
	}
	return 0
}

// Encapsulates a batch request to execute a prepared statement multiple times with different sets of indexed parameters.
// This is useful for executing the same statement with various parameter sets in a single operation, enhancing performance and efficiency.
type ExecuteIndexedStatementBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the prepared statement to be executed.
	StatementId int32 `protobuf:"varint,1,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	// List of sets of indexed parameters for multiple executions of the statement.
	Parameters []*IndexedParameters `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ExecuteIndexedStatementBatchRequest) Reset() {
	*x = ExecuteIndexedStatementBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteIndexedStatementBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteIndexedStatementBatchRequest) ProtoMessage() {}

func (x *ExecuteIndexedStatementBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteIndexedStatementBatchRequest.ProtoReflect.Descriptor instead.
func (*ExecuteIndexedStatementBatchRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteIndexedStatementBatchRequest) GetStatementId() int32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *ExecuteIndexedStatementBatchRequest) GetParameters() []*IndexedParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Represents a request to execute a previously prepared statement by its ID, using named parameters.
// This approach allows for parameter values to be associated with specific parameter names in the statement,
// providing clarity and reducing errors in parameter placement.
type ExecuteNamedStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the prepared statement to be executed.
	StatementId int32 `protobuf:"varint,1,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	// The named parameters to be used with the statement.
	Parameters *NamedParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// (Optional) Number of rows to include into the response message of this call. More rows can be fetched afterwards.
	FetchSize *int32 `protobuf:"varint,3,opt,name=fetch_size,json=fetchSize,proto3,oneof" json:"fetch_size,omitempty"`
}

func (x *ExecuteNamedStatementRequest) Reset() {
	*x = ExecuteNamedStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteNamedStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNamedStatementRequest) ProtoMessage() {}

func (x *ExecuteNamedStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNamedStatementRequest.ProtoReflect.Descriptor instead.
func (*ExecuteNamedStatementRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteNamedStatementRequest) GetStatementId() int32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *ExecuteNamedStatementRequest) GetParameters() *NamedParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExecuteNamedStatementRequest) GetFetchSize() int32 {
	if x != nil && x.FetchSize != nil {
		return *x.FetchSize
	}
	return 0
}

// Encapsulates indexed parameters for a prepared statement.
// This represents a list of parameter values to be used in the statement, where each parameter's position in the list
// corresponds to its position in the statement.
type IndexedParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of values to be used as parameters, indexed by their position in the list.
	Parameters []*ProtoValue `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *IndexedParameters) Reset() {
	*x = IndexedParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedParameters) ProtoMessage() {}

func (x *IndexedParameters) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedParameters.ProtoReflect.Descriptor instead.
func (*IndexedParameters) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{7}
}

func (x *IndexedParameters) GetParameters() []*ProtoValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Encapsulates named parameters for a prepared statement. This allows for parameters to be specified by name,
// providing a flexible and clear way to supply parameters to a prepared statement.
type NamedParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of parameter names to their corresponding values.
	Parameters map[string]*ProtoValue `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NamedParameters) Reset() {
	*x = NamedParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedParameters) ProtoMessage() {}

func (x *NamedParameters) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedParameters.ProtoReflect.Descriptor instead.
func (*NamedParameters) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{8}
}

func (x *NamedParameters) GetParameters() map[string]*ProtoValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Represents a request to close a statement.
// This operation is used to release resources allocated to the statement on the server.
// Closing a statement when it is no longer needed is a good practice to manage resources efficiently.
type CloseStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the statement to be closed.
	StatementId int32 `protobuf:"varint,1,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
}

func (x *CloseStatementRequest) Reset() {
	*x = CloseStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStatementRequest) ProtoMessage() {}

func (x *CloseStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStatementRequest.ProtoReflect.Descriptor instead.
func (*CloseStatementRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{9}
}

func (x *CloseStatementRequest) GetStatementId() int32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

// Represents a request to fetch a batch of results for a previously executed statement.
// This is typically used in conjunction with large result sets,
// where the results are fetched in multiple batches to manage memory and network resources effectively.
type FetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the statement whose results are to be fetched.
	StatementId int32 `protobuf:"varint,1,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	// (Optional) Number of rows to retrieve in this batch. If no fetch size is specified, a default value is used.
	FetchSize *int32 `protobuf:"varint,2,opt,name=fetch_size,json=fetchSize,proto3,oneof" json:"fetch_size,omitempty"`
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_statement_requests_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_statement_requests_proto_rawDescGZIP(), []int{10}
}

func (x *FetchRequest) GetStatementId() int32 {
	if x != nil {
		return x.StatementId
	}
	return 0
}

func (x *FetchRequest) GetFetchSize() int32 {
	if x != nil && x.FetchSize != nil {
		return *x.FetchSize
	}
	return 0
}

var File_org_polypheny_prism_statement_requests_proto protoreflect.FileDescriptor

var file_org_polypheny_prism_statement_requests_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f,
	0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x1a, 0x1f, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65,
	0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xdd, 0x01,
	0x0a, 0x26, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01,
	0x0a, 0x2b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x23, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x54, 0x0a, 0x11, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xc7, 0x01, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x5e, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x15, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x57, 0x0a, 0x13, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x42, 0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x01, 0x5a, 0x19, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x3b, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0xaa, 0x02, 0x0f, 0x50, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x50,
	0x72, 0x69, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_org_polypheny_prism_statement_requests_proto_rawDescOnce sync.Once
	file_org_polypheny_prism_statement_requests_proto_rawDescData = file_org_polypheny_prism_statement_requests_proto_rawDesc
)

func file_org_polypheny_prism_statement_requests_proto_rawDescGZIP() []byte {
	file_org_polypheny_prism_statement_requests_proto_rawDescOnce.Do(func() {
		file_org_polypheny_prism_statement_requests_proto_rawDescData = protoimpl.X.CompressGZIP(file_org_polypheny_prism_statement_requests_proto_rawDescData)
	})
	return file_org_polypheny_prism_statement_requests_proto_rawDescData
}

var file_org_polypheny_prism_statement_requests_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_org_polypheny_prism_statement_requests_proto_goTypes = []any{
	(*CloseResultRequest)(nil),                          // 0: org.polypheny.prism.CloseResultRequest
	(*ExecuteUnparameterizedStatementRequest)(nil),      // 1: org.polypheny.prism.ExecuteUnparameterizedStatementRequest
	(*ExecuteUnparameterizedStatementBatchRequest)(nil), // 2: org.polypheny.prism.ExecuteUnparameterizedStatementBatchRequest
	(*PrepareStatementRequest)(nil),                     // 3: org.polypheny.prism.PrepareStatementRequest
	(*ExecuteIndexedStatementRequest)(nil),              // 4: org.polypheny.prism.ExecuteIndexedStatementRequest
	(*ExecuteIndexedStatementBatchRequest)(nil),         // 5: org.polypheny.prism.ExecuteIndexedStatementBatchRequest
	(*ExecuteNamedStatementRequest)(nil),                // 6: org.polypheny.prism.ExecuteNamedStatementRequest
	(*IndexedParameters)(nil),                           // 7: org.polypheny.prism.IndexedParameters
	(*NamedParameters)(nil),                             // 8: org.polypheny.prism.NamedParameters
	(*CloseStatementRequest)(nil),                       // 9: org.polypheny.prism.CloseStatementRequest
	(*FetchRequest)(nil),                                // 10: org.polypheny.prism.FetchRequest
	nil,                                                 // 11: org.polypheny.prism.NamedParameters.ParametersEntry
	(*ProtoValue)(nil),                                  // 12: org.polypheny.prism.ProtoValue
}
var file_org_polypheny_prism_statement_requests_proto_depIdxs = []int32{
	1,  // 0: org.polypheny.prism.ExecuteUnparameterizedStatementBatchRequest.statements:type_name -> org.polypheny.prism.ExecuteUnparameterizedStatementRequest
	7,  // 1: org.polypheny.prism.ExecuteIndexedStatementRequest.parameters:type_name -> org.polypheny.prism.IndexedParameters
	7,  // 2: org.polypheny.prism.ExecuteIndexedStatementBatchRequest.parameters:type_name -> org.polypheny.prism.IndexedParameters
	8,  // 3: org.polypheny.prism.ExecuteNamedStatementRequest.parameters:type_name -> org.polypheny.prism.NamedParameters
	12, // 4: org.polypheny.prism.IndexedParameters.parameters:type_name -> org.polypheny.prism.ProtoValue
	11, // 5: org.polypheny.prism.NamedParameters.parameters:type_name -> org.polypheny.prism.NamedParameters.ParametersEntry
	12, // 6: org.polypheny.prism.NamedParameters.ParametersEntry.value:type_name -> org.polypheny.prism.ProtoValue
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_org_polypheny_prism_statement_requests_proto_init() }
func file_org_polypheny_prism_statement_requests_proto_init() {
	if File_org_polypheny_prism_statement_requests_proto != nil {
		return
	}
	file_org_polypheny_prism_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_org_polypheny_prism_statement_requests_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CloseResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteUnparameterizedStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteUnparameterizedStatementBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PrepareStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteIndexedStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteIndexedStatementBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteNamedStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*IndexedParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NamedParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CloseStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_statement_requests_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_org_polypheny_prism_statement_requests_proto_msgTypes[1].OneofWrappers = []any{}
	file_org_polypheny_prism_statement_requests_proto_msgTypes[3].OneofWrappers = []any{}
	file_org_polypheny_prism_statement_requests_proto_msgTypes[4].OneofWrappers = []any{}
	file_org_polypheny_prism_statement_requests_proto_msgTypes[6].OneofWrappers = []any{}
	file_org_polypheny_prism_statement_requests_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_polypheny_prism_statement_requests_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_org_polypheny_prism_statement_requests_proto_goTypes,
		DependencyIndexes: file_org_polypheny_prism_statement_requests_proto_depIdxs,
		MessageInfos:      file_org_polypheny_prism_statement_requests_proto_msgTypes,
	}.Build()
	File_org_polypheny_prism_statement_requests_proto = out.File
	file_org_polypheny_prism_statement_requests_proto_rawDesc = nil
	file_org_polypheny_prism_statement_requests_proto_goTypes = nil
	file_org_polypheny_prism_statement_requests_proto_depIdxs = nil
}
