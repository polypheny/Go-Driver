//
//This file contains basic wrapper messages used for the communication between client and server.
//Examples for such messages are a response and a request wrapper that are used to wrap a specific response or request message.
//Further messages for error responses are included.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.0
// source: org/polypheny/prism/protointerface.proto

package prism

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//Wrapper message wrapping a specific request message to be sent to the server.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the request.  Must be strictly greater than 0.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Type:
	//	*Request_DbmsVersionRequest
	//	*Request_DefaultNamespaceRequest
	//	*Request_TableTypesRequest
	//	*Request_TypesRequest
	//	*Request_ProceduresRequest
	//	*Request_FunctionsRequest
	//	*Request_NamespacesRequest
	//	*Request_EntitiesRequest
	//	*Request_SqlStringFunctionsRequest
	//	*Request_SqlSystemFunctionsRequest
	//	*Request_SqlTimeDateFunctionsRequest
	//	*Request_SqlNumericFunctionsRequest
	//	*Request_SqlKeywordsRequest
	//	*Request_ConnectionRequest
	//	*Request_ConnectionCheckRequest
	//	*Request_DisconnectRequest
	//	*Request_ClientInfoPropertiesRequest
	//	*Request_SetClientInfoPropertiesRequest
	//	*Request_ExecuteUnparameterizedStatementRequest
	//	*Request_ExecuteUnparameterizedStatementBatchRequest
	//	*Request_PrepareIndexedStatementRequest
	//	*Request_ExecuteIndexedStatementRequest
	//	*Request_ExecuteIndexedStatementBatchRequest
	//	*Request_PrepareNamedStatementRequest
	//	*Request_ExecuteNamedStatementRequest
	//	*Request_FetchRequest
	//	*Request_CloseStatementRequest
	//	*Request_CommitRequest
	//	*Request_RollbackRequest
	//	*Request_ConnectionPropertiesUpdateRequest
	//	*Request_CloseResultRequest
	Type isRequest_Type `protobuf_oneof:"type"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_protointerface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_protointerface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_protointerface_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Request) GetType() isRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Request) GetDbmsVersionRequest() *DbmsVersionRequest {
	if x, ok := x.GetType().(*Request_DbmsVersionRequest); ok {
		return x.DbmsVersionRequest
	}
	return nil
}

func (x *Request) GetDefaultNamespaceRequest() *DefaultNamespaceRequest {
	if x, ok := x.GetType().(*Request_DefaultNamespaceRequest); ok {
		return x.DefaultNamespaceRequest
	}
	return nil
}

func (x *Request) GetTableTypesRequest() *TableTypesRequest {
	if x, ok := x.GetType().(*Request_TableTypesRequest); ok {
		return x.TableTypesRequest
	}
	return nil
}

func (x *Request) GetTypesRequest() *TypesRequest {
	if x, ok := x.GetType().(*Request_TypesRequest); ok {
		return x.TypesRequest
	}
	return nil
}

func (x *Request) GetProceduresRequest() *ProceduresRequest {
	if x, ok := x.GetType().(*Request_ProceduresRequest); ok {
		return x.ProceduresRequest
	}
	return nil
}

func (x *Request) GetFunctionsRequest() *FunctionsRequest {
	if x, ok := x.GetType().(*Request_FunctionsRequest); ok {
		return x.FunctionsRequest
	}
	return nil
}

func (x *Request) GetNamespacesRequest() *NamespacesRequest {
	if x, ok := x.GetType().(*Request_NamespacesRequest); ok {
		return x.NamespacesRequest
	}
	return nil
}

func (x *Request) GetEntitiesRequest() *EntitiesRequest {
	if x, ok := x.GetType().(*Request_EntitiesRequest); ok {
		return x.EntitiesRequest
	}
	return nil
}

func (x *Request) GetSqlStringFunctionsRequest() *SqlStringFunctionsRequest {
	if x, ok := x.GetType().(*Request_SqlStringFunctionsRequest); ok {
		return x.SqlStringFunctionsRequest
	}
	return nil
}

func (x *Request) GetSqlSystemFunctionsRequest() *SqlSystemFunctionsRequest {
	if x, ok := x.GetType().(*Request_SqlSystemFunctionsRequest); ok {
		return x.SqlSystemFunctionsRequest
	}
	return nil
}

func (x *Request) GetSqlTimeDateFunctionsRequest() *SqlTimeDateFunctionsRequest {
	if x, ok := x.GetType().(*Request_SqlTimeDateFunctionsRequest); ok {
		return x.SqlTimeDateFunctionsRequest
	}
	return nil
}

func (x *Request) GetSqlNumericFunctionsRequest() *SqlNumericFunctionsRequest {
	if x, ok := x.GetType().(*Request_SqlNumericFunctionsRequest); ok {
		return x.SqlNumericFunctionsRequest
	}
	return nil
}

func (x *Request) GetSqlKeywordsRequest() *SqlKeywordsRequest {
	if x, ok := x.GetType().(*Request_SqlKeywordsRequest); ok {
		return x.SqlKeywordsRequest
	}
	return nil
}

func (x *Request) GetConnectionRequest() *ConnectionRequest {
	if x, ok := x.GetType().(*Request_ConnectionRequest); ok {
		return x.ConnectionRequest
	}
	return nil
}

func (x *Request) GetConnectionCheckRequest() *ConnectionCheckRequest {
	if x, ok := x.GetType().(*Request_ConnectionCheckRequest); ok {
		return x.ConnectionCheckRequest
	}
	return nil
}

func (x *Request) GetDisconnectRequest() *DisconnectRequest {
	if x, ok := x.GetType().(*Request_DisconnectRequest); ok {
		return x.DisconnectRequest
	}
	return nil
}

func (x *Request) GetClientInfoPropertiesRequest() *ClientInfoPropertiesRequest {
	if x, ok := x.GetType().(*Request_ClientInfoPropertiesRequest); ok {
		return x.ClientInfoPropertiesRequest
	}
	return nil
}

func (x *Request) GetSetClientInfoPropertiesRequest() *ClientInfoProperties {
	if x, ok := x.GetType().(*Request_SetClientInfoPropertiesRequest); ok {
		return x.SetClientInfoPropertiesRequest
	}
	return nil
}

func (x *Request) GetExecuteUnparameterizedStatementRequest() *ExecuteUnparameterizedStatementRequest {
	if x, ok := x.GetType().(*Request_ExecuteUnparameterizedStatementRequest); ok {
		return x.ExecuteUnparameterizedStatementRequest
	}
	return nil
}

func (x *Request) GetExecuteUnparameterizedStatementBatchRequest() *ExecuteUnparameterizedStatementBatchRequest {
	if x, ok := x.GetType().(*Request_ExecuteUnparameterizedStatementBatchRequest); ok {
		return x.ExecuteUnparameterizedStatementBatchRequest
	}
	return nil
}

func (x *Request) GetPrepareIndexedStatementRequest() *PrepareStatementRequest {
	if x, ok := x.GetType().(*Request_PrepareIndexedStatementRequest); ok {
		return x.PrepareIndexedStatementRequest
	}
	return nil
}

func (x *Request) GetExecuteIndexedStatementRequest() *ExecuteIndexedStatementRequest {
	if x, ok := x.GetType().(*Request_ExecuteIndexedStatementRequest); ok {
		return x.ExecuteIndexedStatementRequest
	}
	return nil
}

func (x *Request) GetExecuteIndexedStatementBatchRequest() *ExecuteIndexedStatementBatchRequest {
	if x, ok := x.GetType().(*Request_ExecuteIndexedStatementBatchRequest); ok {
		return x.ExecuteIndexedStatementBatchRequest
	}
	return nil
}

func (x *Request) GetPrepareNamedStatementRequest() *PrepareStatementRequest {
	if x, ok := x.GetType().(*Request_PrepareNamedStatementRequest); ok {
		return x.PrepareNamedStatementRequest
	}
	return nil
}

func (x *Request) GetExecuteNamedStatementRequest() *ExecuteNamedStatementRequest {
	if x, ok := x.GetType().(*Request_ExecuteNamedStatementRequest); ok {
		return x.ExecuteNamedStatementRequest
	}
	return nil
}

func (x *Request) GetFetchRequest() *FetchRequest {
	if x, ok := x.GetType().(*Request_FetchRequest); ok {
		return x.FetchRequest
	}
	return nil
}

func (x *Request) GetCloseStatementRequest() *CloseStatementRequest {
	if x, ok := x.GetType().(*Request_CloseStatementRequest); ok {
		return x.CloseStatementRequest
	}
	return nil
}

func (x *Request) GetCommitRequest() *CommitRequest {
	if x, ok := x.GetType().(*Request_CommitRequest); ok {
		return x.CommitRequest
	}
	return nil
}

func (x *Request) GetRollbackRequest() *RollbackRequest {
	if x, ok := x.GetType().(*Request_RollbackRequest); ok {
		return x.RollbackRequest
	}
	return nil
}

func (x *Request) GetConnectionPropertiesUpdateRequest() *ConnectionPropertiesUpdateRequest {
	if x, ok := x.GetType().(*Request_ConnectionPropertiesUpdateRequest); ok {
		return x.ConnectionPropertiesUpdateRequest
	}
	return nil
}

func (x *Request) GetCloseResultRequest() *CloseResultRequest {
	if x, ok := x.GetType().(*Request_CloseResultRequest); ok {
		return x.CloseResultRequest
	}
	return nil
}

type isRequest_Type interface {
	isRequest_Type()
}

type Request_DbmsVersionRequest struct {
	DbmsVersionRequest *DbmsVersionRequest `protobuf:"bytes,2,opt,name=dbms_version_request,json=dbmsVersionRequest,proto3,oneof"`
}

type Request_DefaultNamespaceRequest struct {
	DefaultNamespaceRequest *DefaultNamespaceRequest `protobuf:"bytes,4,opt,name=default_namespace_request,json=defaultNamespaceRequest,proto3,oneof"`
}

type Request_TableTypesRequest struct {
	TableTypesRequest *TableTypesRequest `protobuf:"bytes,5,opt,name=table_types_request,json=tableTypesRequest,proto3,oneof"`
}

type Request_TypesRequest struct {
	TypesRequest *TypesRequest `protobuf:"bytes,6,opt,name=types_request,json=typesRequest,proto3,oneof"`
}

type Request_ProceduresRequest struct {
	ProceduresRequest *ProceduresRequest `protobuf:"bytes,9,opt,name=procedures_request,json=proceduresRequest,proto3,oneof"`
}

type Request_FunctionsRequest struct {
	FunctionsRequest *FunctionsRequest `protobuf:"bytes,10,opt,name=functions_request,json=functionsRequest,proto3,oneof"`
}

type Request_NamespacesRequest struct {
	NamespacesRequest *NamespacesRequest `protobuf:"bytes,11,opt,name=namespaces_request,json=namespacesRequest,proto3,oneof"`
}

type Request_EntitiesRequest struct {
	EntitiesRequest *EntitiesRequest `protobuf:"bytes,13,opt,name=entities_request,json=entitiesRequest,proto3,oneof"`
}

type Request_SqlStringFunctionsRequest struct {
	SqlStringFunctionsRequest *SqlStringFunctionsRequest `protobuf:"bytes,14,opt,name=sql_string_functions_request,json=sqlStringFunctionsRequest,proto3,oneof"`
}

type Request_SqlSystemFunctionsRequest struct {
	SqlSystemFunctionsRequest *SqlSystemFunctionsRequest `protobuf:"bytes,15,opt,name=sql_system_functions_request,json=sqlSystemFunctionsRequest,proto3,oneof"`
}

type Request_SqlTimeDateFunctionsRequest struct {
	SqlTimeDateFunctionsRequest *SqlTimeDateFunctionsRequest `protobuf:"bytes,16,opt,name=sql_time_date_functions_request,json=sqlTimeDateFunctionsRequest,proto3,oneof"`
}

type Request_SqlNumericFunctionsRequest struct {
	SqlNumericFunctionsRequest *SqlNumericFunctionsRequest `protobuf:"bytes,17,opt,name=sql_numeric_functions_request,json=sqlNumericFunctionsRequest,proto3,oneof"`
}

type Request_SqlKeywordsRequest struct {
	SqlKeywordsRequest *SqlKeywordsRequest `protobuf:"bytes,18,opt,name=sql_keywords_request,json=sqlKeywordsRequest,proto3,oneof"`
}

type Request_ConnectionRequest struct {
	ConnectionRequest *ConnectionRequest `protobuf:"bytes,19,opt,name=connection_request,json=connectionRequest,proto3,oneof"`
}

type Request_ConnectionCheckRequest struct {
	ConnectionCheckRequest *ConnectionCheckRequest `protobuf:"bytes,20,opt,name=connection_check_request,json=connectionCheckRequest,proto3,oneof"`
}

type Request_DisconnectRequest struct {
	DisconnectRequest *DisconnectRequest `protobuf:"bytes,21,opt,name=disconnect_request,json=disconnectRequest,proto3,oneof"`
}

type Request_ClientInfoPropertiesRequest struct {
	ClientInfoPropertiesRequest *ClientInfoPropertiesRequest `protobuf:"bytes,22,opt,name=client_info_properties_request,json=clientInfoPropertiesRequest,proto3,oneof"`
}

type Request_SetClientInfoPropertiesRequest struct {
	SetClientInfoPropertiesRequest *ClientInfoProperties `protobuf:"bytes,23,opt,name=set_client_info_properties_request,json=setClientInfoPropertiesRequest,proto3,oneof"`
}

type Request_ExecuteUnparameterizedStatementRequest struct {
	ExecuteUnparameterizedStatementRequest *ExecuteUnparameterizedStatementRequest `protobuf:"bytes,24,opt,name=execute_unparameterized_statement_request,json=executeUnparameterizedStatementRequest,proto3,oneof"`
}

type Request_ExecuteUnparameterizedStatementBatchRequest struct {
	ExecuteUnparameterizedStatementBatchRequest *ExecuteUnparameterizedStatementBatchRequest `protobuf:"bytes,25,opt,name=execute_unparameterized_statement_batch_request,json=executeUnparameterizedStatementBatchRequest,proto3,oneof"`
}

type Request_PrepareIndexedStatementRequest struct {
	PrepareIndexedStatementRequest *PrepareStatementRequest `protobuf:"bytes,26,opt,name=prepare_indexed_statement_request,json=prepareIndexedStatementRequest,proto3,oneof"`
}

type Request_ExecuteIndexedStatementRequest struct {
	ExecuteIndexedStatementRequest *ExecuteIndexedStatementRequest `protobuf:"bytes,27,opt,name=execute_indexed_statement_request,json=executeIndexedStatementRequest,proto3,oneof"`
}

type Request_ExecuteIndexedStatementBatchRequest struct {
	ExecuteIndexedStatementBatchRequest *ExecuteIndexedStatementBatchRequest `protobuf:"bytes,28,opt,name=execute_indexed_statement_batch_request,json=executeIndexedStatementBatchRequest,proto3,oneof"`
}

type Request_PrepareNamedStatementRequest struct {
	PrepareNamedStatementRequest *PrepareStatementRequest `protobuf:"bytes,29,opt,name=prepare_named_statement_request,json=prepareNamedStatementRequest,proto3,oneof"`
}

type Request_ExecuteNamedStatementRequest struct {
	ExecuteNamedStatementRequest *ExecuteNamedStatementRequest `protobuf:"bytes,30,opt,name=execute_named_statement_request,json=executeNamedStatementRequest,proto3,oneof"`
}

type Request_FetchRequest struct {
	FetchRequest *FetchRequest `protobuf:"bytes,31,opt,name=fetch_request,json=fetchRequest,proto3,oneof"`
}

type Request_CloseStatementRequest struct {
	CloseStatementRequest *CloseStatementRequest `protobuf:"bytes,32,opt,name=close_statement_request,json=closeStatementRequest,proto3,oneof"`
}

type Request_CommitRequest struct {
	CommitRequest *CommitRequest `protobuf:"bytes,33,opt,name=commit_request,json=commitRequest,proto3,oneof"`
}

type Request_RollbackRequest struct {
	RollbackRequest *RollbackRequest `protobuf:"bytes,34,opt,name=rollback_request,json=rollbackRequest,proto3,oneof"`
}

type Request_ConnectionPropertiesUpdateRequest struct {
	ConnectionPropertiesUpdateRequest *ConnectionPropertiesUpdateRequest `protobuf:"bytes,35,opt,name=connection_properties_update_request,json=connectionPropertiesUpdateRequest,proto3,oneof"`
}

type Request_CloseResultRequest struct {
	CloseResultRequest *CloseResultRequest `protobuf:"bytes,36,opt,name=close_result_request,json=closeResultRequest,proto3,oneof"`
}

func (*Request_DbmsVersionRequest) isRequest_Type() {}

func (*Request_DefaultNamespaceRequest) isRequest_Type() {}

func (*Request_TableTypesRequest) isRequest_Type() {}

func (*Request_TypesRequest) isRequest_Type() {}

func (*Request_ProceduresRequest) isRequest_Type() {}

func (*Request_FunctionsRequest) isRequest_Type() {}

func (*Request_NamespacesRequest) isRequest_Type() {}

func (*Request_EntitiesRequest) isRequest_Type() {}

func (*Request_SqlStringFunctionsRequest) isRequest_Type() {}

func (*Request_SqlSystemFunctionsRequest) isRequest_Type() {}

func (*Request_SqlTimeDateFunctionsRequest) isRequest_Type() {}

func (*Request_SqlNumericFunctionsRequest) isRequest_Type() {}

func (*Request_SqlKeywordsRequest) isRequest_Type() {}

func (*Request_ConnectionRequest) isRequest_Type() {}

func (*Request_ConnectionCheckRequest) isRequest_Type() {}

func (*Request_DisconnectRequest) isRequest_Type() {}

func (*Request_ClientInfoPropertiesRequest) isRequest_Type() {}

func (*Request_SetClientInfoPropertiesRequest) isRequest_Type() {}

func (*Request_ExecuteUnparameterizedStatementRequest) isRequest_Type() {}

func (*Request_ExecuteUnparameterizedStatementBatchRequest) isRequest_Type() {}

func (*Request_PrepareIndexedStatementRequest) isRequest_Type() {}

func (*Request_ExecuteIndexedStatementRequest) isRequest_Type() {}

func (*Request_ExecuteIndexedStatementBatchRequest) isRequest_Type() {}

func (*Request_PrepareNamedStatementRequest) isRequest_Type() {}

func (*Request_ExecuteNamedStatementRequest) isRequest_Type() {}

func (*Request_FetchRequest) isRequest_Type() {}

func (*Request_CloseStatementRequest) isRequest_Type() {}

func (*Request_CommitRequest) isRequest_Type() {}

func (*Request_RollbackRequest) isRequest_Type() {}

func (*Request_ConnectionPropertiesUpdateRequest) isRequest_Type() {}

func (*Request_CloseResultRequest) isRequest_Type() {}

//
//Response message sent to the client by the server in case of an error.
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human readable error message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_protointerface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_protointerface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_protointerface_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//
//Wrapper message wrapping a specific response message to be sent to the client.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the request this response is related to.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// If a request triggers a stream of responses from the server, this flag represents a response to be the end of the stream.
	Last bool `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	// Types that are assignable to Type:
	//	*Response_ErrorResponse
	//	*Response_DbmsVersionResponse
	//	*Response_DefaultNamespaceResponse
	//	*Response_TableTypesResponse
	//	*Response_TypesResponse
	//	*Response_ProceduresResponse
	//	*Response_FunctionsResponse
	//	*Response_NamespacesResponse
	//	*Response_EntitiesResponse
	//	*Response_SqlStringFunctionsResponse
	//	*Response_SqlSystemFunctionsResponse
	//	*Response_SqlTimeDateFunctionsResponse
	//	*Response_SqlNumericFunctionsResponse
	//	*Response_SqlKeywordsResponse
	//	*Response_ConnectionResponse
	//	*Response_ConnectionCheckResponse
	//	*Response_DisconnectResponse
	//	*Response_ClientInfoPropertiesResponse
	//	*Response_SetClientInfoPropertiesResponse
	//	*Response_StatementResponse
	//	*Response_StatementBatchResponse
	//	*Response_StatementResult
	//	*Response_PreparedStatementSignature
	//	*Response_Frame
	//	*Response_CloseStatementResponse
	//	*Response_CommitResponse
	//	*Response_RollbackResponse
	//	*Response_ConnectionPropertiesUpdateResponse
	//	*Response_CloseResultResponse
	Type isResponse_Type `protobuf_oneof:"type"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_polypheny_prism_protointerface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_org_polypheny_prism_protointerface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_org_polypheny_prism_protointerface_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Response) GetLast() bool {
	if x != nil {
		return x.Last
	}
	return false
}

func (m *Response) GetType() isResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Response) GetErrorResponse() *ErrorResponse {
	if x, ok := x.GetType().(*Response_ErrorResponse); ok {
		return x.ErrorResponse
	}
	return nil
}

func (x *Response) GetDbmsVersionResponse() *DbmsVersionResponse {
	if x, ok := x.GetType().(*Response_DbmsVersionResponse); ok {
		return x.DbmsVersionResponse
	}
	return nil
}

func (x *Response) GetDefaultNamespaceResponse() *DefaultNamespaceResponse {
	if x, ok := x.GetType().(*Response_DefaultNamespaceResponse); ok {
		return x.DefaultNamespaceResponse
	}
	return nil
}

func (x *Response) GetTableTypesResponse() *TableTypesResponse {
	if x, ok := x.GetType().(*Response_TableTypesResponse); ok {
		return x.TableTypesResponse
	}
	return nil
}

func (x *Response) GetTypesResponse() *TypesResponse {
	if x, ok := x.GetType().(*Response_TypesResponse); ok {
		return x.TypesResponse
	}
	return nil
}

func (x *Response) GetProceduresResponse() *ProceduresResponse {
	if x, ok := x.GetType().(*Response_ProceduresResponse); ok {
		return x.ProceduresResponse
	}
	return nil
}

func (x *Response) GetFunctionsResponse() *FunctionsResponse {
	if x, ok := x.GetType().(*Response_FunctionsResponse); ok {
		return x.FunctionsResponse
	}
	return nil
}

func (x *Response) GetNamespacesResponse() *NamespacesResponse {
	if x, ok := x.GetType().(*Response_NamespacesResponse); ok {
		return x.NamespacesResponse
	}
	return nil
}

func (x *Response) GetEntitiesResponse() *EntitiesResponse {
	if x, ok := x.GetType().(*Response_EntitiesResponse); ok {
		return x.EntitiesResponse
	}
	return nil
}

func (x *Response) GetSqlStringFunctionsResponse() *MetaStringResponse {
	if x, ok := x.GetType().(*Response_SqlStringFunctionsResponse); ok {
		return x.SqlStringFunctionsResponse
	}
	return nil
}

func (x *Response) GetSqlSystemFunctionsResponse() *MetaStringResponse {
	if x, ok := x.GetType().(*Response_SqlSystemFunctionsResponse); ok {
		return x.SqlSystemFunctionsResponse
	}
	return nil
}

func (x *Response) GetSqlTimeDateFunctionsResponse() *MetaStringResponse {
	if x, ok := x.GetType().(*Response_SqlTimeDateFunctionsResponse); ok {
		return x.SqlTimeDateFunctionsResponse
	}
	return nil
}

func (x *Response) GetSqlNumericFunctionsResponse() *MetaStringResponse {
	if x, ok := x.GetType().(*Response_SqlNumericFunctionsResponse); ok {
		return x.SqlNumericFunctionsResponse
	}
	return nil
}

func (x *Response) GetSqlKeywordsResponse() *MetaStringResponse {
	if x, ok := x.GetType().(*Response_SqlKeywordsResponse); ok {
		return x.SqlKeywordsResponse
	}
	return nil
}

func (x *Response) GetConnectionResponse() *ConnectionResponse {
	if x, ok := x.GetType().(*Response_ConnectionResponse); ok {
		return x.ConnectionResponse
	}
	return nil
}

func (x *Response) GetConnectionCheckResponse() *ConnectionCheckResponse {
	if x, ok := x.GetType().(*Response_ConnectionCheckResponse); ok {
		return x.ConnectionCheckResponse
	}
	return nil
}

func (x *Response) GetDisconnectResponse() *DisconnectResponse {
	if x, ok := x.GetType().(*Response_DisconnectResponse); ok {
		return x.DisconnectResponse
	}
	return nil
}

func (x *Response) GetClientInfoPropertiesResponse() *ClientInfoProperties {
	if x, ok := x.GetType().(*Response_ClientInfoPropertiesResponse); ok {
		return x.ClientInfoPropertiesResponse
	}
	return nil
}

func (x *Response) GetSetClientInfoPropertiesResponse() *ClientInfoPropertiesResponse {
	if x, ok := x.GetType().(*Response_SetClientInfoPropertiesResponse); ok {
		return x.SetClientInfoPropertiesResponse
	}
	return nil
}

func (x *Response) GetStatementResponse() *StatementResponse {
	if x, ok := x.GetType().(*Response_StatementResponse); ok {
		return x.StatementResponse
	}
	return nil
}

func (x *Response) GetStatementBatchResponse() *StatementBatchResponse {
	if x, ok := x.GetType().(*Response_StatementBatchResponse); ok {
		return x.StatementBatchResponse
	}
	return nil
}

func (x *Response) GetStatementResult() *StatementResult {
	if x, ok := x.GetType().(*Response_StatementResult); ok {
		return x.StatementResult
	}
	return nil
}

func (x *Response) GetPreparedStatementSignature() *PreparedStatementSignature {
	if x, ok := x.GetType().(*Response_PreparedStatementSignature); ok {
		return x.PreparedStatementSignature
	}
	return nil
}

func (x *Response) GetFrame() *Frame {
	if x, ok := x.GetType().(*Response_Frame); ok {
		return x.Frame
	}
	return nil
}

func (x *Response) GetCloseStatementResponse() *CloseStatementResponse {
	if x, ok := x.GetType().(*Response_CloseStatementResponse); ok {
		return x.CloseStatementResponse
	}
	return nil
}

func (x *Response) GetCommitResponse() *CommitResponse {
	if x, ok := x.GetType().(*Response_CommitResponse); ok {
		return x.CommitResponse
	}
	return nil
}

func (x *Response) GetRollbackResponse() *RollbackResponse {
	if x, ok := x.GetType().(*Response_RollbackResponse); ok {
		return x.RollbackResponse
	}
	return nil
}

func (x *Response) GetConnectionPropertiesUpdateResponse() *ConnectionPropertiesUpdateResponse {
	if x, ok := x.GetType().(*Response_ConnectionPropertiesUpdateResponse); ok {
		return x.ConnectionPropertiesUpdateResponse
	}
	return nil
}

func (x *Response) GetCloseResultResponse() *CloseResultResponse {
	if x, ok := x.GetType().(*Response_CloseResultResponse); ok {
		return x.CloseResultResponse
	}
	return nil
}

type isResponse_Type interface {
	isResponse_Type()
}

type Response_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,256,opt,name=error_response,json=errorResponse,proto3,oneof"`
}

type Response_DbmsVersionResponse struct {
	DbmsVersionResponse *DbmsVersionResponse `protobuf:"bytes,3,opt,name=dbms_version_response,json=dbmsVersionResponse,proto3,oneof"`
}

type Response_DefaultNamespaceResponse struct {
	DefaultNamespaceResponse *DefaultNamespaceResponse `protobuf:"bytes,24,opt,name=default_namespace_response,json=defaultNamespaceResponse,proto3,oneof"`
}

type Response_TableTypesResponse struct {
	TableTypesResponse *TableTypesResponse `protobuf:"bytes,5,opt,name=table_types_response,json=tableTypesResponse,proto3,oneof"`
}

type Response_TypesResponse struct {
	TypesResponse *TypesResponse `protobuf:"bytes,26,opt,name=types_response,json=typesResponse,proto3,oneof"`
}

type Response_ProceduresResponse struct {
	ProceduresResponse *ProceduresResponse `protobuf:"bytes,7,opt,name=procedures_response,json=proceduresResponse,proto3,oneof"`
}

type Response_FunctionsResponse struct {
	FunctionsResponse *FunctionsResponse `protobuf:"bytes,29,opt,name=functions_response,json=functionsResponse,proto3,oneof"`
}

type Response_NamespacesResponse struct {
	NamespacesResponse *NamespacesResponse `protobuf:"bytes,8,opt,name=namespaces_response,json=namespacesResponse,proto3,oneof"`
}

type Response_EntitiesResponse struct {
	EntitiesResponse *EntitiesResponse `protobuf:"bytes,9,opt,name=entities_response,json=entitiesResponse,proto3,oneof"`
}

type Response_SqlStringFunctionsResponse struct {
	SqlStringFunctionsResponse *MetaStringResponse `protobuf:"bytes,10,opt,name=sql_string_functions_response,json=sqlStringFunctionsResponse,proto3,oneof"`
}

type Response_SqlSystemFunctionsResponse struct {
	SqlSystemFunctionsResponse *MetaStringResponse `protobuf:"bytes,11,opt,name=sql_system_functions_response,json=sqlSystemFunctionsResponse,proto3,oneof"`
}

type Response_SqlTimeDateFunctionsResponse struct {
	SqlTimeDateFunctionsResponse *MetaStringResponse `protobuf:"bytes,30,opt,name=sql_time_date_functions_response,json=sqlTimeDateFunctionsResponse,proto3,oneof"`
}

type Response_SqlNumericFunctionsResponse struct {
	SqlNumericFunctionsResponse *MetaStringResponse `protobuf:"bytes,31,opt,name=sql_numeric_functions_response,json=sqlNumericFunctionsResponse,proto3,oneof"`
}

type Response_SqlKeywordsResponse struct {
	SqlKeywordsResponse *MetaStringResponse `protobuf:"bytes,32,opt,name=sql_keywords_response,json=sqlKeywordsResponse,proto3,oneof"`
}

type Response_ConnectionResponse struct {
	ConnectionResponse *ConnectionResponse `protobuf:"bytes,12,opt,name=connection_response,json=connectionResponse,proto3,oneof"`
}

type Response_ConnectionCheckResponse struct {
	ConnectionCheckResponse *ConnectionCheckResponse `protobuf:"bytes,25,opt,name=connection_check_response,json=connectionCheckResponse,proto3,oneof"`
}

type Response_DisconnectResponse struct {
	DisconnectResponse *DisconnectResponse `protobuf:"bytes,13,opt,name=disconnect_response,json=disconnectResponse,proto3,oneof"`
}

type Response_ClientInfoPropertiesResponse struct {
	ClientInfoPropertiesResponse *ClientInfoProperties `protobuf:"bytes,33,opt,name=client_info_properties_response,json=clientInfoPropertiesResponse,proto3,oneof"`
}

type Response_SetClientInfoPropertiesResponse struct {
	SetClientInfoPropertiesResponse *ClientInfoPropertiesResponse `protobuf:"bytes,14,opt,name=set_client_info_properties_response,json=setClientInfoPropertiesResponse,proto3,oneof"`
}

type Response_StatementResponse struct {
	StatementResponse *StatementResponse `protobuf:"bytes,15,opt,name=statement_response,json=statementResponse,proto3,oneof"`
}

type Response_StatementBatchResponse struct {
	StatementBatchResponse *StatementBatchResponse `protobuf:"bytes,16,opt,name=statement_batch_response,json=statementBatchResponse,proto3,oneof"`
}

type Response_StatementResult struct {
	StatementResult *StatementResult `protobuf:"bytes,17,opt,name=statement_result,json=statementResult,proto3,oneof"`
}

type Response_PreparedStatementSignature struct {
	PreparedStatementSignature *PreparedStatementSignature `protobuf:"bytes,18,opt,name=prepared_statement_signature,json=preparedStatementSignature,proto3,oneof"`
}

type Response_Frame struct {
	Frame *Frame `protobuf:"bytes,19,opt,name=frame,proto3,oneof"`
}

type Response_CloseStatementResponse struct {
	CloseStatementResponse *CloseStatementResponse `protobuf:"bytes,20,opt,name=close_statement_response,json=closeStatementResponse,proto3,oneof"`
}

type Response_CommitResponse struct {
	CommitResponse *CommitResponse `protobuf:"bytes,21,opt,name=commit_response,json=commitResponse,proto3,oneof"`
}

type Response_RollbackResponse struct {
	RollbackResponse *RollbackResponse `protobuf:"bytes,22,opt,name=rollback_response,json=rollbackResponse,proto3,oneof"`
}

type Response_ConnectionPropertiesUpdateResponse struct {
	ConnectionPropertiesUpdateResponse *ConnectionPropertiesUpdateResponse `protobuf:"bytes,23,opt,name=connection_properties_update_response,json=connectionPropertiesUpdateResponse,proto3,oneof"`
}

type Response_CloseResultResponse struct {
	CloseResultResponse *CloseResultResponse `protobuf:"bytes,34,opt,name=close_result_response,json=closeResultResponse,proto3,oneof"`
}

func (*Response_ErrorResponse) isResponse_Type() {}

func (*Response_DbmsVersionResponse) isResponse_Type() {}

func (*Response_DefaultNamespaceResponse) isResponse_Type() {}

func (*Response_TableTypesResponse) isResponse_Type() {}

func (*Response_TypesResponse) isResponse_Type() {}

func (*Response_ProceduresResponse) isResponse_Type() {}

func (*Response_FunctionsResponse) isResponse_Type() {}

func (*Response_NamespacesResponse) isResponse_Type() {}

func (*Response_EntitiesResponse) isResponse_Type() {}

func (*Response_SqlStringFunctionsResponse) isResponse_Type() {}

func (*Response_SqlSystemFunctionsResponse) isResponse_Type() {}

func (*Response_SqlTimeDateFunctionsResponse) isResponse_Type() {}

func (*Response_SqlNumericFunctionsResponse) isResponse_Type() {}

func (*Response_SqlKeywordsResponse) isResponse_Type() {}

func (*Response_ConnectionResponse) isResponse_Type() {}

func (*Response_ConnectionCheckResponse) isResponse_Type() {}

func (*Response_DisconnectResponse) isResponse_Type() {}

func (*Response_ClientInfoPropertiesResponse) isResponse_Type() {}

func (*Response_SetClientInfoPropertiesResponse) isResponse_Type() {}

func (*Response_StatementResponse) isResponse_Type() {}

func (*Response_StatementBatchResponse) isResponse_Type() {}

func (*Response_StatementResult) isResponse_Type() {}

func (*Response_PreparedStatementSignature) isResponse_Type() {}

func (*Response_Frame) isResponse_Type() {}

func (*Response_CloseStatementResponse) isResponse_Type() {}

func (*Response_CommitResponse) isResponse_Type() {}

func (*Response_RollbackResponse) isResponse_Type() {}

func (*Response_ConnectionPropertiesUpdateResponse) isResponse_Type() {}

func (*Response_CloseResultResponse) isResponse_Type() {}

var File_org_polypheny_prism_protointerface_proto protoreflect.FileDescriptor

var file_org_polypheny_prism_protointerface_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f,
	0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x1a,
	0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70,
	0x72, 0x69, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27,
	0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x31, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79,
	0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68,
	0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f,
	0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x1a, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x14, 0x64, 0x62, 0x6d, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x44, 0x62, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x62,
	0x6d, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6a, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68,
	0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x57, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x73,
	0x71, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71,
	0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d,
	0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1d, 0x73,
	0x71, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x57, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x1e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x77, 0x0a, 0x22, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x29,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x26,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x2b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x79, 0x0a, 0x21, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a,
	0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70,
	0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x90, 0x01, 0x0a, 0x27, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x23, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x75, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x1f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x64, 0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x21,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xda, 0x16, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x15, 0x64, 0x62, 0x6d, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x44, 0x62, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x64, 0x62, 0x6d,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6d, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6c, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c,
	0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x1a, 0x73, 0x71, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x20,
	0x73, 0x71, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x69, 0x73, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68,
	0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x72, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x73, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68,
	0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f,
	0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x47,
	0x0a, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x69, 0x73, 0x6d, 0x42, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x19, 0x6f, 0x72,
	0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x3b, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_org_polypheny_prism_protointerface_proto_rawDescOnce sync.Once
	file_org_polypheny_prism_protointerface_proto_rawDescData = file_org_polypheny_prism_protointerface_proto_rawDesc
)

func file_org_polypheny_prism_protointerface_proto_rawDescGZIP() []byte {
	file_org_polypheny_prism_protointerface_proto_rawDescOnce.Do(func() {
		file_org_polypheny_prism_protointerface_proto_rawDescData = protoimpl.X.CompressGZIP(file_org_polypheny_prism_protointerface_proto_rawDescData)
	})
	return file_org_polypheny_prism_protointerface_proto_rawDescData
}

var file_org_polypheny_prism_protointerface_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_org_polypheny_prism_protointerface_proto_goTypes = []interface{}{
	(*Request)(nil),                                     // 0: org.polypheny.prism.Request
	(*ErrorResponse)(nil),                               // 1: org.polypheny.prism.ErrorResponse
	(*Response)(nil),                                    // 2: org.polypheny.prism.Response
	(*DbmsVersionRequest)(nil),                          // 3: org.polypheny.prism.DbmsVersionRequest
	(*DefaultNamespaceRequest)(nil),                     // 4: org.polypheny.prism.DefaultNamespaceRequest
	(*TableTypesRequest)(nil),                           // 5: org.polypheny.prism.TableTypesRequest
	(*TypesRequest)(nil),                                // 6: org.polypheny.prism.TypesRequest
	(*ProceduresRequest)(nil),                           // 7: org.polypheny.prism.ProceduresRequest
	(*FunctionsRequest)(nil),                            // 8: org.polypheny.prism.FunctionsRequest
	(*NamespacesRequest)(nil),                           // 9: org.polypheny.prism.NamespacesRequest
	(*EntitiesRequest)(nil),                             // 10: org.polypheny.prism.EntitiesRequest
	(*SqlStringFunctionsRequest)(nil),                   // 11: org.polypheny.prism.SqlStringFunctionsRequest
	(*SqlSystemFunctionsRequest)(nil),                   // 12: org.polypheny.prism.SqlSystemFunctionsRequest
	(*SqlTimeDateFunctionsRequest)(nil),                 // 13: org.polypheny.prism.SqlTimeDateFunctionsRequest
	(*SqlNumericFunctionsRequest)(nil),                  // 14: org.polypheny.prism.SqlNumericFunctionsRequest
	(*SqlKeywordsRequest)(nil),                          // 15: org.polypheny.prism.SqlKeywordsRequest
	(*ConnectionRequest)(nil),                           // 16: org.polypheny.prism.ConnectionRequest
	(*ConnectionCheckRequest)(nil),                      // 17: org.polypheny.prism.ConnectionCheckRequest
	(*DisconnectRequest)(nil),                           // 18: org.polypheny.prism.DisconnectRequest
	(*ClientInfoPropertiesRequest)(nil),                 // 19: org.polypheny.prism.ClientInfoPropertiesRequest
	(*ClientInfoProperties)(nil),                        // 20: org.polypheny.prism.ClientInfoProperties
	(*ExecuteUnparameterizedStatementRequest)(nil),      // 21: org.polypheny.prism.ExecuteUnparameterizedStatementRequest
	(*ExecuteUnparameterizedStatementBatchRequest)(nil), // 22: org.polypheny.prism.ExecuteUnparameterizedStatementBatchRequest
	(*PrepareStatementRequest)(nil),                     // 23: org.polypheny.prism.PrepareStatementRequest
	(*ExecuteIndexedStatementRequest)(nil),              // 24: org.polypheny.prism.ExecuteIndexedStatementRequest
	(*ExecuteIndexedStatementBatchRequest)(nil),         // 25: org.polypheny.prism.ExecuteIndexedStatementBatchRequest
	(*ExecuteNamedStatementRequest)(nil),                // 26: org.polypheny.prism.ExecuteNamedStatementRequest
	(*FetchRequest)(nil),                                // 27: org.polypheny.prism.FetchRequest
	(*CloseStatementRequest)(nil),                       // 28: org.polypheny.prism.CloseStatementRequest
	(*CommitRequest)(nil),                               // 29: org.polypheny.prism.CommitRequest
	(*RollbackRequest)(nil),                             // 30: org.polypheny.prism.RollbackRequest
	(*ConnectionPropertiesUpdateRequest)(nil),           // 31: org.polypheny.prism.ConnectionPropertiesUpdateRequest
	(*CloseResultRequest)(nil),                          // 32: org.polypheny.prism.CloseResultRequest
	(*DbmsVersionResponse)(nil),                         // 33: org.polypheny.prism.DbmsVersionResponse
	(*DefaultNamespaceResponse)(nil),                    // 34: org.polypheny.prism.DefaultNamespaceResponse
	(*TableTypesResponse)(nil),                          // 35: org.polypheny.prism.TableTypesResponse
	(*TypesResponse)(nil),                               // 36: org.polypheny.prism.TypesResponse
	(*ProceduresResponse)(nil),                          // 37: org.polypheny.prism.ProceduresResponse
	(*FunctionsResponse)(nil),                           // 38: org.polypheny.prism.FunctionsResponse
	(*NamespacesResponse)(nil),                          // 39: org.polypheny.prism.NamespacesResponse
	(*EntitiesResponse)(nil),                            // 40: org.polypheny.prism.EntitiesResponse
	(*MetaStringResponse)(nil),                          // 41: org.polypheny.prism.MetaStringResponse
	(*ConnectionResponse)(nil),                          // 42: org.polypheny.prism.ConnectionResponse
	(*ConnectionCheckResponse)(nil),                     // 43: org.polypheny.prism.ConnectionCheckResponse
	(*DisconnectResponse)(nil),                          // 44: org.polypheny.prism.DisconnectResponse
	(*ClientInfoPropertiesResponse)(nil),                // 45: org.polypheny.prism.ClientInfoPropertiesResponse
	(*StatementResponse)(nil),                           // 46: org.polypheny.prism.StatementResponse
	(*StatementBatchResponse)(nil),                      // 47: org.polypheny.prism.StatementBatchResponse
	(*StatementResult)(nil),                             // 48: org.polypheny.prism.StatementResult
	(*PreparedStatementSignature)(nil),                  // 49: org.polypheny.prism.PreparedStatementSignature
	(*Frame)(nil),                                       // 50: org.polypheny.prism.Frame
	(*CloseStatementResponse)(nil),                      // 51: org.polypheny.prism.CloseStatementResponse
	(*CommitResponse)(nil),                              // 52: org.polypheny.prism.CommitResponse
	(*RollbackResponse)(nil),                            // 53: org.polypheny.prism.RollbackResponse
	(*ConnectionPropertiesUpdateResponse)(nil),          // 54: org.polypheny.prism.ConnectionPropertiesUpdateResponse
	(*CloseResultResponse)(nil),                         // 55: org.polypheny.prism.CloseResultResponse
}
var file_org_polypheny_prism_protointerface_proto_depIdxs = []int32{
	3,  // 0: org.polypheny.prism.Request.dbms_version_request:type_name -> org.polypheny.prism.DbmsVersionRequest
	4,  // 1: org.polypheny.prism.Request.default_namespace_request:type_name -> org.polypheny.prism.DefaultNamespaceRequest
	5,  // 2: org.polypheny.prism.Request.table_types_request:type_name -> org.polypheny.prism.TableTypesRequest
	6,  // 3: org.polypheny.prism.Request.types_request:type_name -> org.polypheny.prism.TypesRequest
	7,  // 4: org.polypheny.prism.Request.procedures_request:type_name -> org.polypheny.prism.ProceduresRequest
	8,  // 5: org.polypheny.prism.Request.functions_request:type_name -> org.polypheny.prism.FunctionsRequest
	9,  // 6: org.polypheny.prism.Request.namespaces_request:type_name -> org.polypheny.prism.NamespacesRequest
	10, // 7: org.polypheny.prism.Request.entities_request:type_name -> org.polypheny.prism.EntitiesRequest
	11, // 8: org.polypheny.prism.Request.sql_string_functions_request:type_name -> org.polypheny.prism.SqlStringFunctionsRequest
	12, // 9: org.polypheny.prism.Request.sql_system_functions_request:type_name -> org.polypheny.prism.SqlSystemFunctionsRequest
	13, // 10: org.polypheny.prism.Request.sql_time_date_functions_request:type_name -> org.polypheny.prism.SqlTimeDateFunctionsRequest
	14, // 11: org.polypheny.prism.Request.sql_numeric_functions_request:type_name -> org.polypheny.prism.SqlNumericFunctionsRequest
	15, // 12: org.polypheny.prism.Request.sql_keywords_request:type_name -> org.polypheny.prism.SqlKeywordsRequest
	16, // 13: org.polypheny.prism.Request.connection_request:type_name -> org.polypheny.prism.ConnectionRequest
	17, // 14: org.polypheny.prism.Request.connection_check_request:type_name -> org.polypheny.prism.ConnectionCheckRequest
	18, // 15: org.polypheny.prism.Request.disconnect_request:type_name -> org.polypheny.prism.DisconnectRequest
	19, // 16: org.polypheny.prism.Request.client_info_properties_request:type_name -> org.polypheny.prism.ClientInfoPropertiesRequest
	20, // 17: org.polypheny.prism.Request.set_client_info_properties_request:type_name -> org.polypheny.prism.ClientInfoProperties
	21, // 18: org.polypheny.prism.Request.execute_unparameterized_statement_request:type_name -> org.polypheny.prism.ExecuteUnparameterizedStatementRequest
	22, // 19: org.polypheny.prism.Request.execute_unparameterized_statement_batch_request:type_name -> org.polypheny.prism.ExecuteUnparameterizedStatementBatchRequest
	23, // 20: org.polypheny.prism.Request.prepare_indexed_statement_request:type_name -> org.polypheny.prism.PrepareStatementRequest
	24, // 21: org.polypheny.prism.Request.execute_indexed_statement_request:type_name -> org.polypheny.prism.ExecuteIndexedStatementRequest
	25, // 22: org.polypheny.prism.Request.execute_indexed_statement_batch_request:type_name -> org.polypheny.prism.ExecuteIndexedStatementBatchRequest
	23, // 23: org.polypheny.prism.Request.prepare_named_statement_request:type_name -> org.polypheny.prism.PrepareStatementRequest
	26, // 24: org.polypheny.prism.Request.execute_named_statement_request:type_name -> org.polypheny.prism.ExecuteNamedStatementRequest
	27, // 25: org.polypheny.prism.Request.fetch_request:type_name -> org.polypheny.prism.FetchRequest
	28, // 26: org.polypheny.prism.Request.close_statement_request:type_name -> org.polypheny.prism.CloseStatementRequest
	29, // 27: org.polypheny.prism.Request.commit_request:type_name -> org.polypheny.prism.CommitRequest
	30, // 28: org.polypheny.prism.Request.rollback_request:type_name -> org.polypheny.prism.RollbackRequest
	31, // 29: org.polypheny.prism.Request.connection_properties_update_request:type_name -> org.polypheny.prism.ConnectionPropertiesUpdateRequest
	32, // 30: org.polypheny.prism.Request.close_result_request:type_name -> org.polypheny.prism.CloseResultRequest
	1,  // 31: org.polypheny.prism.Response.error_response:type_name -> org.polypheny.prism.ErrorResponse
	33, // 32: org.polypheny.prism.Response.dbms_version_response:type_name -> org.polypheny.prism.DbmsVersionResponse
	34, // 33: org.polypheny.prism.Response.default_namespace_response:type_name -> org.polypheny.prism.DefaultNamespaceResponse
	35, // 34: org.polypheny.prism.Response.table_types_response:type_name -> org.polypheny.prism.TableTypesResponse
	36, // 35: org.polypheny.prism.Response.types_response:type_name -> org.polypheny.prism.TypesResponse
	37, // 36: org.polypheny.prism.Response.procedures_response:type_name -> org.polypheny.prism.ProceduresResponse
	38, // 37: org.polypheny.prism.Response.functions_response:type_name -> org.polypheny.prism.FunctionsResponse
	39, // 38: org.polypheny.prism.Response.namespaces_response:type_name -> org.polypheny.prism.NamespacesResponse
	40, // 39: org.polypheny.prism.Response.entities_response:type_name -> org.polypheny.prism.EntitiesResponse
	41, // 40: org.polypheny.prism.Response.sql_string_functions_response:type_name -> org.polypheny.prism.MetaStringResponse
	41, // 41: org.polypheny.prism.Response.sql_system_functions_response:type_name -> org.polypheny.prism.MetaStringResponse
	41, // 42: org.polypheny.prism.Response.sql_time_date_functions_response:type_name -> org.polypheny.prism.MetaStringResponse
	41, // 43: org.polypheny.prism.Response.sql_numeric_functions_response:type_name -> org.polypheny.prism.MetaStringResponse
	41, // 44: org.polypheny.prism.Response.sql_keywords_response:type_name -> org.polypheny.prism.MetaStringResponse
	42, // 45: org.polypheny.prism.Response.connection_response:type_name -> org.polypheny.prism.ConnectionResponse
	43, // 46: org.polypheny.prism.Response.connection_check_response:type_name -> org.polypheny.prism.ConnectionCheckResponse
	44, // 47: org.polypheny.prism.Response.disconnect_response:type_name -> org.polypheny.prism.DisconnectResponse
	20, // 48: org.polypheny.prism.Response.client_info_properties_response:type_name -> org.polypheny.prism.ClientInfoProperties
	45, // 49: org.polypheny.prism.Response.set_client_info_properties_response:type_name -> org.polypheny.prism.ClientInfoPropertiesResponse
	46, // 50: org.polypheny.prism.Response.statement_response:type_name -> org.polypheny.prism.StatementResponse
	47, // 51: org.polypheny.prism.Response.statement_batch_response:type_name -> org.polypheny.prism.StatementBatchResponse
	48, // 52: org.polypheny.prism.Response.statement_result:type_name -> org.polypheny.prism.StatementResult
	49, // 53: org.polypheny.prism.Response.prepared_statement_signature:type_name -> org.polypheny.prism.PreparedStatementSignature
	50, // 54: org.polypheny.prism.Response.frame:type_name -> org.polypheny.prism.Frame
	51, // 55: org.polypheny.prism.Response.close_statement_response:type_name -> org.polypheny.prism.CloseStatementResponse
	52, // 56: org.polypheny.prism.Response.commit_response:type_name -> org.polypheny.prism.CommitResponse
	53, // 57: org.polypheny.prism.Response.rollback_response:type_name -> org.polypheny.prism.RollbackResponse
	54, // 58: org.polypheny.prism.Response.connection_properties_update_response:type_name -> org.polypheny.prism.ConnectionPropertiesUpdateResponse
	55, // 59: org.polypheny.prism.Response.close_result_response:type_name -> org.polypheny.prism.CloseResultResponse
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_org_polypheny_prism_protointerface_proto_init() }
func file_org_polypheny_prism_protointerface_proto_init() {
	if File_org_polypheny_prism_protointerface_proto != nil {
		return
	}
	file_org_polypheny_prism_connection_requests_proto_init()
	file_org_polypheny_prism_connection_responses_proto_init()
	file_org_polypheny_prism_meta_requests_proto_init()
	file_org_polypheny_prism_meta_responses_proto_init()
	file_org_polypheny_prism_namespace_meta_requests_proto_init()
	file_org_polypheny_prism_namespace_meta_responses_proto_init()
	file_org_polypheny_prism_statement_requests_proto_init()
	file_org_polypheny_prism_statement_responses_proto_init()
	file_org_polypheny_prism_transaction_requests_proto_init()
	file_org_polypheny_prism_transaction_responses_proto_init()
	file_org_polypheny_prism_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_org_polypheny_prism_protointerface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_protointerface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_polypheny_prism_protointerface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_org_polypheny_prism_protointerface_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Request_DbmsVersionRequest)(nil),
		(*Request_DefaultNamespaceRequest)(nil),
		(*Request_TableTypesRequest)(nil),
		(*Request_TypesRequest)(nil),
		(*Request_ProceduresRequest)(nil),
		(*Request_FunctionsRequest)(nil),
		(*Request_NamespacesRequest)(nil),
		(*Request_EntitiesRequest)(nil),
		(*Request_SqlStringFunctionsRequest)(nil),
		(*Request_SqlSystemFunctionsRequest)(nil),
		(*Request_SqlTimeDateFunctionsRequest)(nil),
		(*Request_SqlNumericFunctionsRequest)(nil),
		(*Request_SqlKeywordsRequest)(nil),
		(*Request_ConnectionRequest)(nil),
		(*Request_ConnectionCheckRequest)(nil),
		(*Request_DisconnectRequest)(nil),
		(*Request_ClientInfoPropertiesRequest)(nil),
		(*Request_SetClientInfoPropertiesRequest)(nil),
		(*Request_ExecuteUnparameterizedStatementRequest)(nil),
		(*Request_ExecuteUnparameterizedStatementBatchRequest)(nil),
		(*Request_PrepareIndexedStatementRequest)(nil),
		(*Request_ExecuteIndexedStatementRequest)(nil),
		(*Request_ExecuteIndexedStatementBatchRequest)(nil),
		(*Request_PrepareNamedStatementRequest)(nil),
		(*Request_ExecuteNamedStatementRequest)(nil),
		(*Request_FetchRequest)(nil),
		(*Request_CloseStatementRequest)(nil),
		(*Request_CommitRequest)(nil),
		(*Request_RollbackRequest)(nil),
		(*Request_ConnectionPropertiesUpdateRequest)(nil),
		(*Request_CloseResultRequest)(nil),
	}
	file_org_polypheny_prism_protointerface_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Response_ErrorResponse)(nil),
		(*Response_DbmsVersionResponse)(nil),
		(*Response_DefaultNamespaceResponse)(nil),
		(*Response_TableTypesResponse)(nil),
		(*Response_TypesResponse)(nil),
		(*Response_ProceduresResponse)(nil),
		(*Response_FunctionsResponse)(nil),
		(*Response_NamespacesResponse)(nil),
		(*Response_EntitiesResponse)(nil),
		(*Response_SqlStringFunctionsResponse)(nil),
		(*Response_SqlSystemFunctionsResponse)(nil),
		(*Response_SqlTimeDateFunctionsResponse)(nil),
		(*Response_SqlNumericFunctionsResponse)(nil),
		(*Response_SqlKeywordsResponse)(nil),
		(*Response_ConnectionResponse)(nil),
		(*Response_ConnectionCheckResponse)(nil),
		(*Response_DisconnectResponse)(nil),
		(*Response_ClientInfoPropertiesResponse)(nil),
		(*Response_SetClientInfoPropertiesResponse)(nil),
		(*Response_StatementResponse)(nil),
		(*Response_StatementBatchResponse)(nil),
		(*Response_StatementResult)(nil),
		(*Response_PreparedStatementSignature)(nil),
		(*Response_Frame)(nil),
		(*Response_CloseStatementResponse)(nil),
		(*Response_CommitResponse)(nil),
		(*Response_RollbackResponse)(nil),
		(*Response_ConnectionPropertiesUpdateResponse)(nil),
		(*Response_CloseResultResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_polypheny_prism_protointerface_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_org_polypheny_prism_protointerface_proto_goTypes,
		DependencyIndexes: file_org_polypheny_prism_protointerface_proto_depIdxs,
		MessageInfos:      file_org_polypheny_prism_protointerface_proto_msgTypes,
	}.Build()
	File_org_polypheny_prism_protointerface_proto = out.File
	file_org_polypheny_prism_protointerface_proto_rawDesc = nil
	file_org_polypheny_prism_protointerface_proto_goTypes = nil
	file_org_polypheny_prism_protointerface_proto_depIdxs = nil
}
